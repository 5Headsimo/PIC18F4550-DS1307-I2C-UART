

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Oct 01 22:05:46 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    28  0000                     
    29                           ; Version 2.20
    30                           ; Generated 12/02/2020 GMT
    31                           ; 
    32                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4550 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  0079A6                     __pidataCOMRAM:
    66                           	callstack 0
    67                           
    68                           ;initializer for _date
    69  0079A6  44                 	db	68
    70  0079A7  61                 	db	97
    71  0079A8  74                 	db	116
    72  0079A9  65                 	db	101
    73  0079AA  3A                 	db	58
    74  0079AB  20                 	db	32
    75  0079AC  00                 	db	0
    76                           
    77                           ;initializer for _time
    78  0079AD  54                 	db	84
    79  0079AE  69                 	db	105
    80  0079AF  6D                 	db	109
    81  0079B0  65                 	db	101
    82  0079B1  3A                 	db	58
    83  0079B2  20                 	db	32
    84  0079B3  00                 	db	0
    85                           
    86                           ;initializer for _error
    87  0079B4  45                 	db	69
    88  0079B5  72                 	db	114
    89  0079B6  72                 	db	114
    90  0079B7  6F                 	db	111
    91  0079B8  72                 	db	114
    92  0079B9  21                 	db	33
    93  0079BA  00                 	db	0
    94                           
    95                           ;initializer for _point
    96  0079BB  2E                 	db	46
    97  0079BC  20                 	db	32
    98  0079BD  00                 	db	0
    99                           
   100                           ;initializer for _dash
   101  0079BE  2D                 	db	45
   102  0079BF  00                 	db	0
   103                           
   104                           ;initializer for _colon
   105  0079C0  3A                 	db	58
   106  0079C1  00                 	db	0
   107                           
   108                           	psect	idataBANK0
   109  007B1C                     __pidataBANK0:
   110                           	callstack 0
   111                           
   112                           ;initializer for _days
   113  007B1C  4D                 	db	77
   114  007B1D  6F                 	db	111
   115  007B1E  6E                 	db	110
   116  007B1F  00                 	db	0
   117  007B20  00                 	db	0
   118  007B21  00                 	db	0
   119  007B22  00                 	db	0
   120  007B23  00                 	db	0
   121  007B24  00                 	db	0
   122  007B25  00                 	db	0
   123  007B26  54                 	db	84
   124  007B27  75                 	db	117
   125  007B28  65                 	db	101
   126  007B29  00                 	db	0
   127  007B2A  00                 	db	0
   128  007B2B  00                 	db	0
   129  007B2C  00                 	db	0
   130  007B2D  00                 	db	0
   131  007B2E  00                 	db	0
   132  007B2F  00                 	db	0
   133  007B30  57                 	db	87
   134  007B31  65                 	db	101
   135  007B32  6E                 	db	110
   136  007B33  00                 	db	0
   137  007B34  00                 	db	0
   138  007B35  00                 	db	0
   139  007B36  00                 	db	0
   140  007B37  00                 	db	0
   141  007B38  00                 	db	0
   142  007B39  00                 	db	0
   143  007B3A  54                 	db	84
   144  007B3B  68                 	db	104
   145  007B3C  75                 	db	117
   146  007B3D  00                 	db	0
   147  007B3E  00                 	db	0
   148  007B3F  00                 	db	0
   149  007B40  00                 	db	0
   150  007B41  00                 	db	0
   151  007B42  00                 	db	0
   152  007B43  00                 	db	0
   153  007B44  46                 	db	70
   154  007B45  72                 	db	114
   155  007B46  69                 	db	105
   156  007B47  00                 	db	0
   157  007B48  00                 	db	0
   158  007B49  00                 	db	0
   159  007B4A  00                 	db	0
   160  007B4B  00                 	db	0
   161  007B4C  00                 	db	0
   162  007B4D  00                 	db	0
   163  007B4E  53                 	db	83
   164  007B4F  61                 	db	97
   165  007B50  74                 	db	116
   166  007B51  00                 	db	0
   167  007B52  00                 	db	0
   168  007B53  00                 	db	0
   169  007B54  00                 	db	0
   170  007B55  00                 	db	0
   171  007B56  00                 	db	0
   172  007B57  00                 	db	0
   173  007B58  53                 	db	83
   174  007B59  75                 	db	117
   175  007B5A  6E                 	db	110
   176  007B5B  00                 	db	0
   177  007B5C  00                 	db	0
   178  007B5D  00                 	db	0
   179  007B5E  00                 	db	0
   180  007B5F  00                 	db	0
   181  007B60  00                 	db	0
   182  007B61  00                 	db	0
   183  007B62  00                 	db	0
   184  007B63  00                 	db	0
   185  007B64  00                 	db	0
   186  007B65  00                 	db	0
   187  007B66  00                 	db	0
   188  007B67  00                 	db	0
   189  007B68  00                 	db	0
   190  007B69  00                 	db	0
   191  007B6A  00                 	db	0
   192  007B6B  00                 	db	0
   193  007B6C  00                 	db	0
   194  007B6D  00                 	db	0
   195  007B6E  00                 	db	0
   196  007B6F  00                 	db	0
   197  007B70  00                 	db	0
   198  007B71  00                 	db	0
   199  007B72  00                 	db	0
   200  007B73  00                 	db	0
   201  007B74  00                 	db	0
   202  007B75  00                 	db	0
   203  007B76  00                 	db	0
   204  007B77  00                 	db	0
   205  007B78  00                 	db	0
   206  007B79  00                 	db	0
   207  007B7A  00                 	db	0
   208  007B7B  00                 	db	0
   209  007B7C  00                 	db	0
   210  007B7D  00                 	db	0
   211  007B7E  00                 	db	0
   212  007B7F  00                 	db	0
   213                           
   214                           	psect	idataBANK1
   215  007CA1                     __pidataBANK1:
   216                           	callstack 0
   217                           
   218                           ;initializer for _months
   219  007CA1  4A                 	db	74
   220  007CA2  75                 	db	117
   221  007CA3  6E                 	db	110
   222  007CA4  00                 	db	0
   223  007CA5  00                 	db	0
   224  007CA6  00                 	db	0
   225  007CA7  00                 	db	0
   226  007CA8  00                 	db	0
   227  007CA9  00                 	db	0
   228  007CAA  00                 	db	0
   229  007CAB  00                 	db	0
   230  007CAC  00                 	db	0
   231  007CAD  00                 	db	0
   232  007CAE  00                 	db	0
   233  007CAF  00                 	db	0
   234  007CB0  46                 	db	70
   235  007CB1  65                 	db	101
   236  007CB2  62                 	db	98
   237  007CB3  00                 	db	0
   238  007CB4  00                 	db	0
   239  007CB5  00                 	db	0
   240  007CB6  00                 	db	0
   241  007CB7  00                 	db	0
   242  007CB8  00                 	db	0
   243  007CB9  00                 	db	0
   244  007CBA  00                 	db	0
   245  007CBB  00                 	db	0
   246  007CBC  00                 	db	0
   247  007CBD  00                 	db	0
   248  007CBE  00                 	db	0
   249  007CBF  4D                 	db	77
   250  007CC0  61                 	db	97
   251  007CC1  72                 	db	114
   252  007CC2  00                 	db	0
   253  007CC3  00                 	db	0
   254  007CC4  00                 	db	0
   255  007CC5  00                 	db	0
   256  007CC6  00                 	db	0
   257  007CC7  00                 	db	0
   258  007CC8  00                 	db	0
   259  007CC9  00                 	db	0
   260  007CCA  00                 	db	0
   261  007CCB  00                 	db	0
   262  007CCC  00                 	db	0
   263  007CCD  00                 	db	0
   264  007CCE  41                 	db	65
   265  007CCF  70                 	db	112
   266  007CD0  72                 	db	114
   267  007CD1  00                 	db	0
   268  007CD2  00                 	db	0
   269  007CD3  00                 	db	0
   270  007CD4  00                 	db	0
   271  007CD5  00                 	db	0
   272  007CD6  00                 	db	0
   273  007CD7  00                 	db	0
   274  007CD8  00                 	db	0
   275  007CD9  00                 	db	0
   276  007CDA  00                 	db	0
   277  007CDB  00                 	db	0
   278  007CDC  00                 	db	0
   279  007CDD  4D                 	db	77
   280  007CDE  61                 	db	97
   281  007CDF  79                 	db	121
   282  007CE0  00                 	db	0
   283  007CE1  00                 	db	0
   284  007CE2  00                 	db	0
   285  007CE3  00                 	db	0
   286  007CE4  00                 	db	0
   287  007CE5  00                 	db	0
   288  007CE6  00                 	db	0
   289  007CE7  00                 	db	0
   290  007CE8  00                 	db	0
   291  007CE9  00                 	db	0
   292  007CEA  00                 	db	0
   293  007CEB  00                 	db	0
   294  007CEC  4A                 	db	74
   295  007CED  75                 	db	117
   296  007CEE  6E                 	db	110
   297  007CEF  00                 	db	0
   298  007CF0  00                 	db	0
   299  007CF1  00                 	db	0
   300  007CF2  00                 	db	0
   301  007CF3  00                 	db	0
   302  007CF4  00                 	db	0
   303  007CF5  00                 	db	0
   304  007CF6  00                 	db	0
   305  007CF7  00                 	db	0
   306  007CF8  00                 	db	0
   307  007CF9  00                 	db	0
   308  007CFA  00                 	db	0
   309  007CFB  4A                 	db	74
   310  007CFC  75                 	db	117
   311  007CFD  6C                 	db	108
   312  007CFE  00                 	db	0
   313  007CFF  00                 	db	0
   314  007D00  00                 	db	0
   315  007D01  00                 	db	0
   316  007D02  00                 	db	0
   317  007D03  00                 	db	0
   318  007D04  00                 	db	0
   319  007D05  00                 	db	0
   320  007D06  00                 	db	0
   321  007D07  00                 	db	0
   322  007D08  00                 	db	0
   323  007D09  00                 	db	0
   324  007D0A  41                 	db	65
   325  007D0B  75                 	db	117
   326  007D0C  67                 	db	103
   327  007D0D  00                 	db	0
   328  007D0E  00                 	db	0
   329  007D0F  00                 	db	0
   330  007D10  00                 	db	0
   331  007D11  00                 	db	0
   332  007D12  00                 	db	0
   333  007D13  00                 	db	0
   334  007D14  00                 	db	0
   335  007D15  00                 	db	0
   336  007D16  00                 	db	0
   337  007D17  00                 	db	0
   338  007D18  00                 	db	0
   339  007D19  53                 	db	83
   340  007D1A  65                 	db	101
   341  007D1B  70                 	db	112
   342  007D1C  00                 	db	0
   343  007D1D  00                 	db	0
   344  007D1E  00                 	db	0
   345  007D1F  00                 	db	0
   346  007D20  00                 	db	0
   347  007D21  00                 	db	0
   348  007D22  00                 	db	0
   349  007D23  00                 	db	0
   350  007D24  00                 	db	0
   351  007D25  00                 	db	0
   352  007D26  00                 	db	0
   353  007D27  00                 	db	0
   354  007D28  4F                 	db	79
   355  007D29  63                 	db	99
   356  007D2A  74                 	db	116
   357  007D2B  00                 	db	0
   358  007D2C  00                 	db	0
   359  007D2D  00                 	db	0
   360  007D2E  00                 	db	0
   361  007D2F  00                 	db	0
   362  007D30  00                 	db	0
   363  007D31  00                 	db	0
   364  007D32  00                 	db	0
   365  007D33  00                 	db	0
   366  007D34  00                 	db	0
   367  007D35  00                 	db	0
   368  007D36  00                 	db	0
   369  007D37  4E                 	db	78
   370  007D38  6F                 	db	111
   371  007D39  76                 	db	118
   372  007D3A  00                 	db	0
   373  007D3B  00                 	db	0
   374  007D3C  00                 	db	0
   375  007D3D  00                 	db	0
   376  007D3E  00                 	db	0
   377  007D3F  00                 	db	0
   378  007D40  00                 	db	0
   379  007D41  00                 	db	0
   380  007D42  00                 	db	0
   381  007D43  00                 	db	0
   382  007D44  00                 	db	0
   383  007D45  00                 	db	0
   384  007D46  44                 	db	68
   385  007D47  65                 	db	101
   386  007D48  63                 	db	99
   387  007D49  00                 	db	0
   388  007D4A  00                 	db	0
   389  007D4B  00                 	db	0
   390  007D4C  00                 	db	0
   391  007D4D  00                 	db	0
   392  007D4E  00                 	db	0
   393  007D4F  00                 	db	0
   394  007D50  00                 	db	0
   395  007D51  00                 	db	0
   396  007D52  00                 	db	0
   397  007D53  00                 	db	0
   398  007D54  00                 	db	0
   399  007D55  00                 	db	0
   400  007D56  00                 	db	0
   401  007D57  00                 	db	0
   402  007D58  00                 	db	0
   403  007D59  00                 	db	0
   404  007D5A  00                 	db	0
   405  007D5B  00                 	db	0
   406  007D5C  00                 	db	0
   407  007D5D  00                 	db	0
   408  007D5E  00                 	db	0
   409  007D5F  00                 	db	0
   410  007D60  00                 	db	0
   411  007D61  00                 	db	0
   412  007D62  00                 	db	0
   413  007D63  00                 	db	0
   414  007D64  00                 	db	0
   415  007D65  00                 	db	0
   416  007D66  00                 	db	0
   417  007D67  00                 	db	0
   418  007D68  00                 	db	0
   419  007D69  00                 	db	0
   420  007D6A  00                 	db	0
   421  007D6B  00                 	db	0
   422  007D6C  00                 	db	0
   423  007D6D  00                 	db	0
   424  007D6E  00                 	db	0
   425  007D6F  00                 	db	0
   426  007D70  00                 	db	0
   427  007D71  00                 	db	0
   428  007D72  00                 	db	0
   429  007D73  00                 	db	0
   430  007D74  00                 	db	0
   431  007D75  00                 	db	0
   432  007D76  00                 	db	0
   433  007D77  00                 	db	0
   434  007D78  00                 	db	0
   435  007D79  00                 	db	0
   436  007D7A  00                 	db	0
   437  007D7B  00                 	db	0
   438  007D7C  00                 	db	0
   439  007D7D  00                 	db	0
   440  007D7E  00                 	db	0
   441  007D7F  00                 	db	0
   442  007D80  00                 	db	0
   443  007D81  00                 	db	0
   444  0000                     _RCREG	set	4014
   445  0000                     _TXREG	set	4013
   446  0000                     _PIR1bits	set	3998
   447  0000                     _RCSTAbits	set	4011
   448  0000                     _TXSTAbits	set	4012
   449  0000                     _SPBRG	set	4015
   450  0000                     _TRISCbits	set	3988
   451  0000                     _LATB	set	3978
   452  0000                     _TRISB	set	3987
   453  0000                     _CREN	set	32092
   454  0000                     _LATB1	set	31825
   455  0000                     _LATB0	set	31824
   456                           
   457                           ; #config settings
   458                           
   459                           	psect	cinit
   460  007B80                     __pcinit:
   461                           	callstack 0
   462  007B80                     start_initialization:
   463                           	callstack 0
   464  007B80                     __initialization:
   465                           	callstack 0
   466                           
   467                           ; Initialize objects allocated to BANK1 (225 bytes)
   468                           ; load TBLPTR registers with __pidataBANK1
   469  007B80  0EA1               	movlw	low __pidataBANK1
   470  007B82  6EF6               	movwf	tblptrl,c
   471  007B84  0E7C               	movlw	high __pidataBANK1
   472  007B86  6EF7               	movwf	tblptrh,c
   473  007B88  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   474  007B8A  6EF8               	movwf	tblptru,c
   475  007B8C  EE01  F000         	lfsr	0,__pdataBANK1
   476  007B90  EE10 F0E1          	lfsr	1,225
   477  007B94                     copy_data0:
   478  007B94  0009               	tblrd		*+
   479  007B96  CFF5 FFEE          	movff	tablat,postinc0
   480  007B9A  50E5               	movf	postdec1,w,c
   481  007B9C  50E1               	movf	fsr1l,w,c
   482  007B9E  E1FA               	bnz	copy_data0
   483                           
   484                           ; Initialize objects allocated to BANK0 (100 bytes)
   485                           ; load TBLPTR registers with __pidataBANK0
   486  007BA0  0E1C               	movlw	low __pidataBANK0
   487  007BA2  6EF6               	movwf	tblptrl,c
   488  007BA4  0E7B               	movlw	high __pidataBANK0
   489  007BA6  6EF7               	movwf	tblptrh,c
   490  007BA8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   491  007BAA  6EF8               	movwf	tblptru,c
   492  007BAC  EE00  F060         	lfsr	0,__pdataBANK0
   493  007BB0  EE10 F064          	lfsr	1,100
   494  007BB4                     copy_data1:
   495  007BB4  0009               	tblrd		*+
   496  007BB6  CFF5 FFEE          	movff	tablat,postinc0
   497  007BBA  50E5               	movf	postdec1,w,c
   498  007BBC  50E1               	movf	fsr1l,w,c
   499  007BBE  E1FA               	bnz	copy_data1
   500                           
   501                           ; Initialize objects allocated to COMRAM (28 bytes)
   502                           ; load TBLPTR registers with __pidataCOMRAM
   503  007BC0  0EA6               	movlw	low __pidataCOMRAM
   504  007BC2  6EF6               	movwf	tblptrl,c
   505  007BC4  0E79               	movlw	high __pidataCOMRAM
   506  007BC6  6EF7               	movwf	tblptrh,c
   507  007BC8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   508  007BCA  6EF8               	movwf	tblptru,c
   509  007BCC  EE00  F001         	lfsr	0,__pdataCOMRAM
   510  007BD0  EE10 F01C          	lfsr	1,28
   511  007BD4                     copy_data2:
   512  007BD4  0009               	tblrd		*+
   513  007BD6  CFF5 FFEE          	movff	tablat,postinc0
   514  007BDA  50E5               	movf	postdec1,w,c
   515  007BDC  50E1               	movf	fsr1l,w,c
   516  007BDE  E1FA               	bnz	copy_data2
   517                           
   518                           ; Clear objects allocated to COMRAM (10 bytes)
   519  007BE0  EE00  F01D         	lfsr	0,__pbssCOMRAM
   520  007BE4  0E0A               	movlw	10
   521  007BE6                     clear_0:
   522  007BE6  6AEE               	clrf	postinc0,c
   523  007BE8  06E8               	decf	wreg,f,c
   524  007BEA  E1FD               	bnz	clear_0
   525  007BEC                     end_of_initialization:
   526                           	callstack 0
   527  007BEC                     __end_of__initialization:
   528                           	callstack 0
   529  007BEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   530  007BEE  6EF8               	movwf	tblptru,c
   531  007BF0  0100               	movlb	0
   532  007BF2  EFFB  F03D         	goto	_main	;jump to C main() function
   533                           
   534                           	psect	bssCOMRAM
   535  00001D                     __pbssCOMRAM:
   536                           	callstack 0
   537  00001D                     _rx_data:
   538                           	callstack 0
   539  00001D                     	ds	10
   540                           
   541                           	psect	dataCOMRAM
   542  000001                     __pdataCOMRAM:
   543                           	callstack 0
   544  000001                     _date:
   545                           	callstack 0
   546  000001                     	ds	7
   547  000008                     _time:
   548                           	callstack 0
   549  000008                     	ds	7
   550  00000F                     _error:
   551                           	callstack 0
   552  00000F                     	ds	7
   553  000016                     _point:
   554                           	callstack 0
   555  000016                     	ds	3
   556  000019                     _dash:
   557                           	callstack 0
   558  000019                     	ds	2
   559  00001B                     _colon:
   560                           	callstack 0
   561  00001B                     	ds	2
   562                           
   563                           	psect	dataBANK0
   564  000060                     __pdataBANK0:
   565                           	callstack 0
   566  000060                     _days:
   567                           	callstack 0
   568  000060                     	ds	100
   569                           
   570                           	psect	dataBANK1
   571  000100                     __pdataBANK1:
   572                           	callstack 0
   573  000100                     _months:
   574                           	callstack 0
   575  000100                     	ds	225
   576                           
   577                           	psect	cstackCOMRAM
   578  000027                     __pcstackCOMRAM:
   579                           	callstack 0
   580  000027                     ??_lcd_data:
   581  000027                     ??_lcd_command:
   582  000027                     
   583                           ; 1 bytes @ 0x0
   584  000027                     	ds	1
   585  000028                     lcd_command@cmd:
   586                           	callstack 0
   587  000028                     lcd_data@dat:
   588                           	callstack 0
   589                           
   590                           ; 1 bytes @ 0x1
   591  000028                     	ds	1
   592  000029                     ??_lcd_init:
   593  000029                     ascii_display@bcd:
   594                           	callstack 0
   595  000029                     lcd_string@str:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x2
   599  000029                     	ds	1
   600  00002A                     ascii_display@temp:
   601                           	callstack 0
   602                           
   603                           ; 1 bytes @ 0x3
   604  00002A                     	ds	1
   605  00002B                     ??_days_display:
   606  00002B                     ??_months_display:
   607                           
   608                           ; 1 bytes @ 0x4
   609  00002B                     	ds	2
   610  00002D                     days_display@bcd:
   611                           	callstack 0
   612  00002D                     months_display@bcd:
   613                           	callstack 0
   614                           
   615                           ; 1 bytes @ 0x6
   616  00002D                     	ds	1
   617  00002E                     days_display@temp:
   618                           	callstack 0
   619  00002E                     months_display@Ltemp:
   620                           	callstack 0
   621                           
   622                           ; 1 bytes @ 0x7
   623  00002E                     	ds	1
   624  00002F                     months_display@Htemp:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x8
   628  00002F                     	ds	1
   629  000030                     main@i:
   630                           	callstack 0
   631                           
   632                           ; 1 bytes @ 0x9
   633  000030                     	ds	1
   634                           
   635 ;;
   636 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   637 ;;
   638 ;; *************** function _main *****************
   639 ;; Defined at:
   640 ;;		line 11 in file "main.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;		None
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  i               1    9[COMRAM] unsigned char 
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   654 ;;      Params:         0       0       0       0       0       0       0       0       0
   655 ;;      Locals:         1       0       0       0       0       0       0       0       0
   656 ;;      Temps:          0       0       0       0       0       0       0       0       0
   657 ;;      Totals:         1       0       0       0       0       0       0       0       0
   658 ;;Total ram usage:        1 bytes
   659 ;; Hardware stack levels required when called:    3
   660 ;; This function calls:
   661 ;;		_ascii_display
   662 ;;		_days_display
   663 ;;		_lcd_command
   664 ;;		_lcd_init
   665 ;;		_lcd_string
   666 ;;		_months_display
   667 ;;		_uart_init
   668 ;;		_uart_rx
   669 ;; This function is called by:
   670 ;;		Startup code after reset
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text0
   675  007BF6                     __ptext0:
   676                           	callstack 0
   677  007BF6                     _main:
   678                           	callstack 28
   679  007BF6                     
   680                           ;main.c: 12:     uart_init();
   681  007BF6  ECC7  F03C         	call	_uart_init	;wreg free
   682  007BFA                     
   683                           ;main.c: 13:     lcd_init();
   684  007BFA  EC22  F03D         	call	_lcd_init	;wreg free
   685  007BFE                     l1160:
   686                           
   687                           ;main.c: 17:         for(unsigned char i=0; i<7; i++) {
   688  007BFE  0E00               	movlw	0
   689  007C00  6E30               	movwf	main@i^0,c
   690  007C02                     l1164:
   691                           
   692                           ;main.c: 18:             rx_data[i]= uart_rx();
   693  007C02  0E1D               	movlw	low _rx_data
   694  007C04  2430               	addwf	main@i^0,w,c
   695  007C06  6ED9               	movwf	fsr2l,c
   696  007C08  6ADA               	clrf	fsr2h,c
   697  007C0A  0E00               	movlw	high _rx_data
   698  007C0C  22DA               	addwfc	fsr2h,f,c
   699  007C0E  ECE1  F03C         	call	_uart_rx	;wreg free
   700  007C12  6EDF               	movwf	indf2,c
   701  007C14                     
   702                           ;main.c: 19:         }
   703  007C14  2A30               	incf	main@i^0,f,c
   704  007C16  0E06               	movlw	6
   705  007C18  6430               	cpfsgt	main@i^0,c
   706  007C1A  EF11  F03E         	goto	u141
   707  007C1E  EF13  F03E         	goto	u140
   708  007C22                     u141:
   709  007C22  EF01  F03E         	goto	l1164
   710  007C26                     u140:
   711  007C26                     
   712                           ;main.c: 21:         lcd_command(0x84);
   713  007C26  0E84               	movlw	132
   714  007C28  EC65  F03D         	call	_lcd_command
   715                           
   716                           ;main.c: 22:         ascii_display(rx_data[2]);
   717  007C2C  501F               	movf	(_rx_data+2)^0,w,c
   718  007C2E  ECF4  F03C         	call	_ascii_display
   719  007C32                     
   720                           ;main.c: 23:         lcd_string(colon);
   721  007C32  0E1B               	movlw	low _colon
   722  007C34  6E29               	movwf	lcd_string@str^0,c
   723  007C36  0E00               	movlw	high _colon
   724  007C38  6E2A               	movwf	(lcd_string@str+1)^0,c
   725  007C3A  EC0A  F03D         	call	_lcd_string	;wreg free
   726  007C3E                     
   727                           ;main.c: 24:         ascii_display(rx_data[1]);
   728  007C3E  501E               	movf	(_rx_data+1)^0,w,c
   729  007C40  ECF4  F03C         	call	_ascii_display
   730                           
   731                           ;main.c: 25:         lcd_string(colon);
   732  007C44  0E1B               	movlw	low _colon
   733  007C46  6E29               	movwf	lcd_string@str^0,c
   734  007C48  0E00               	movlw	high _colon
   735  007C4A  6E2A               	movwf	(lcd_string@str+1)^0,c
   736  007C4C  EC0A  F03D         	call	_lcd_string	;wreg free
   737  007C50                     
   738                           ;main.c: 26:         ascii_display(rx_data[0]);
   739  007C50  501D               	movf	_rx_data^0,w,c
   740  007C52  ECF4  F03C         	call	_ascii_display
   741  007C56                     
   742                           ;main.c: 29:         lcd_command(0xC1);
   743  007C56  0EC1               	movlw	193
   744  007C58  EC65  F03D         	call	_lcd_command
   745                           
   746                           ;main.c: 30:         days_display(rx_data[3]);
   747  007C5C  5020               	movf	(_rx_data+3)^0,w,c
   748  007C5E  ECC1  F03E         	call	_days_display
   749                           
   750                           ;main.c: 31:         lcd_string(point);
   751  007C62  0E16               	movlw	low _point
   752  007C64  6E29               	movwf	lcd_string@str^0,c
   753  007C66  0E00               	movlw	high _point
   754  007C68  6E2A               	movwf	(lcd_string@str+1)^0,c
   755  007C6A  EC0A  F03D         	call	_lcd_string	;wreg free
   756  007C6E                     
   757                           ;main.c: 32:         ascii_display(rx_data[4]);
   758  007C6E  5021               	movf	(_rx_data+4)^0,w,c
   759  007C70  ECF4  F03C         	call	_ascii_display
   760  007C74                     
   761                           ;main.c: 33:         lcd_string(dash);
   762  007C74  0E19               	movlw	low _dash
   763  007C76  6E29               	movwf	lcd_string@str^0,c
   764  007C78  0E00               	movlw	high _dash
   765  007C7A  6E2A               	movwf	(lcd_string@str+1)^0,c
   766  007C7C  EC0A  F03D         	call	_lcd_string	;wreg free
   767  007C80                     
   768                           ;main.c: 34:         months_display(rx_data[5]);
   769  007C80  5022               	movf	(_rx_data+5)^0,w,c
   770  007C82  EC36  F03F         	call	_months_display
   771  007C86                     
   772                           ;main.c: 35:         lcd_string(dash);
   773  007C86  0E19               	movlw	low _dash
   774  007C88  6E29               	movwf	lcd_string@str^0,c
   775  007C8A  0E00               	movlw	high _dash
   776  007C8C  6E2A               	movwf	(lcd_string@str+1)^0,c
   777  007C8E  EC0A  F03D         	call	_lcd_string	;wreg free
   778                           
   779                           ;main.c: 36:         ascii_display(rx_data[6]);
   780  007C92  5023               	movf	(_rx_data+6)^0,w,c
   781  007C94  ECF4  F03C         	call	_ascii_display
   782  007C98  EFFF  F03D         	goto	l1160
   783  007C9C  EF00  F000         	goto	start
   784  007CA0                     __end_of_main:
   785                           	callstack 0
   786                           
   787 ;; *************** function _uart_rx *****************
   788 ;; Defined at:
   789 ;;		line 38 in file "uart_driver.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      unsigned char 
   796 ;; Registers used:
   797 ;;		wreg, status,2
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   803 ;;      Params:         0       0       0       0       0       0       0       0       0
   804 ;;      Locals:         0       0       0       0       0       0       0       0       0
   805 ;;      Temps:          0       0       0       0       0       0       0       0       0
   806 ;;      Totals:         0       0       0       0       0       0       0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text1
   817  0079C2                     __ptext1:
   818                           	callstack 0
   819  0079C2                     _uart_rx:
   820                           	callstack 30
   821  0079C2                     l116:
   822  0079C2  AA9E               	btfss	158,5,c	;volatile
   823  0079C4  EFE6  F03C         	goto	u61
   824  0079C8  EFE8  F03C         	goto	u60
   825  0079CC                     u61:
   826  0079CC  EFE1  F03C         	goto	l116
   827  0079D0                     u60:
   828  0079D0                     
   829                           ;uart_driver.c: 40:     if(RCSTAbits.OERR) {
   830  0079D0  A2AB               	btfss	171,1,c	;volatile
   831  0079D2  EFED  F03C         	goto	u71
   832  0079D6  EFEF  F03C         	goto	u70
   833  0079DA                     u71:
   834  0079DA  EFF2  F03C         	goto	l1014
   835  0079DE                     u70:
   836  0079DE                     
   837                           ;uart_driver.c: 41:         CREN = 0;
   838  0079DE  98AB               	bcf	4011,4,c	;volatile
   839                           
   840                           ;uart_driver.c: 42:         __nop();
   841  0079E0  F000               	nop	
   842                           
   843                           ;uart_driver.c: 43:         CREN = 1;
   844  0079E2  88AB               	bsf	4011,4,c	;volatile
   845  0079E4                     l1014:
   846                           
   847                           ;uart_driver.c: 45:     return RCREG;
   848  0079E4  50AE               	movf	174,w,c	;volatile
   849  0079E6  0012               	return		;funcret
   850  0079E8                     __end_of_uart_rx:
   851                           	callstack 0
   852                           
   853 ;; *************** function _uart_init *****************
   854 ;; Defined at:
   855 ;;		line 11 in file "uart_driver.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   869 ;;      Params:         0       0       0       0       0       0       0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0
   872 ;;      Totals:         0       0       0       0       0       0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           	psect	text2
   883  00798E                     __ptext2:
   884                           	callstack 0
   885  00798E                     _uart_init:
   886                           	callstack 30
   887  00798E                     
   888                           ;uart_driver.c: 12:     TRISCbits.RC6 = 0;
   889  00798E  9C94               	bcf	148,6,c	;volatile
   890                           
   891                           ;uart_driver.c: 13:     TRISCbits.RC7 = 1;
   892  007990  8E94               	bsf	148,7,c	;volatile
   893  007992                     
   894                           ;uart_driver.c: 15:     SPBRG = 21;
   895  007992  0E15               	movlw	21
   896  007994  6EAF               	movwf	175,c	;volatile
   897  007996                     
   898                           ;uart_driver.c: 16:     TXSTAbits.BRGH = 1;
   899  007996  84AC               	bsf	172,2,c	;volatile
   900  007998                     
   901                           ;uart_driver.c: 17:     TXSTAbits.SYNC = 0;
   902  007998  98AC               	bcf	172,4,c	;volatile
   903  00799A                     
   904                           ;uart_driver.c: 18:     RCSTAbits.SPEN = 1;
   905  00799A  8EAB               	bsf	171,7,c	;volatile
   906  00799C                     
   907                           ;uart_driver.c: 19:     RCSTAbits.CREN = 1;
   908  00799C  88AB               	bsf	171,4,c	;volatile
   909  00799E                     
   910                           ;uart_driver.c: 20:     TXSTAbits.TX9 = 0;
   911  00799E  9CAC               	bcf	172,6,c	;volatile
   912  0079A0                     
   913                           ;uart_driver.c: 21:     RCSTAbits.RX9 = 0;
   914  0079A0  9CAB               	bcf	171,6,c	;volatile
   915  0079A2                     
   916                           ;uart_driver.c: 22:     TXSTAbits.TXEN = 1;
   917  0079A2  8AAC               	bsf	172,5,c	;volatile
   918  0079A4  0012               	return		;funcret
   919  0079A6                     __end_of_uart_init:
   920                           	callstack 0
   921                           
   922 ;; *************** function _months_display *****************
   923 ;; Defined at:
   924 ;;		line 65 in file "ds1307_driver.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;  bcd             1    wreg     unsigned char 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  bcd             1    6[COMRAM] unsigned char 
   929 ;;  Htemp           1    8[COMRAM] unsigned char 
   930 ;;  Ltemp           1    7[COMRAM] unsigned char 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   940 ;;      Params:         0       0       0       0       0       0       0       0       0
   941 ;;      Locals:         3       0       0       0       0       0       0       0       0
   942 ;;      Temps:          2       0       0       0       0       0       0       0       0
   943 ;;      Totals:         5       0       0       0       0       0       0       0       0
   944 ;;Total ram usage:        5 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; Hardware stack levels required when called:    2
   947 ;; This function calls:
   948 ;;		_lcd_string
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text3
   955  007E6C                     __ptext3:
   956                           	callstack 0
   957  007E6C                     _months_display:
   958                           	callstack 28
   959                           
   960                           ;incstack = 0
   961                           ;months_display@bcd stored from wreg
   962  007E6C  6E2D               	movwf	months_display@bcd^0,c
   963  007E6E                     
   964                           ;ds1307_driver.c: 66:     unsigned char Ltemp;;ds1307_driver.c: 67:     unsigned char Ht
      +                          emp;;ds1307_driver.c: 69:     Htemp = bcd;
   965  007E6E  C02D  F02F         	movff	months_display@bcd,months_display@Htemp
   966  007E72                     
   967                           ;ds1307_driver.c: 70:     Htemp = (Htemp >> 4) | 0x30;
   968  007E72  382F               	swapf	months_display@Htemp^0,w,c
   969  007E74  0B0F               	andlw	15
   970  007E76  0930               	iorlw	48
   971  007E78  6E2F               	movwf	months_display@Htemp^0,c
   972  007E7A                     
   973                           ;ds1307_driver.c: 72:     Ltemp = bcd;
   974  007E7A  C02D  F02E         	movff	months_display@bcd,months_display@Ltemp
   975  007E7E                     
   976                           ;ds1307_driver.c: 73:     Ltemp = Ltemp & 0x0F;
   977  007E7E  502E               	movf	months_display@Ltemp^0,w,c
   978  007E80  0B0F               	andlw	15
   979  007E82  6E2E               	movwf	months_display@Ltemp^0,c
   980  007E84                     
   981                           ;ds1307_driver.c: 74:     Ltemp = Ltemp | 0x30;
   982  007E84  502E               	movf	months_display@Ltemp^0,w,c
   983  007E86  0930               	iorlw	48
   984  007E88  6E2E               	movwf	months_display@Ltemp^0,c
   985                           
   986                           ;ds1307_driver.c: 76:     switch(Ltemp)
   987  007E8A  EFCA  F03F         	goto	l1150
   988  007E8E                     l1116:
   989                           
   990                           ;ds1307_driver.c: 79:             if(Htemp == (0x31)) {
   991  007E8E  0E31               	movlw	49
   992  007E90  182F               	xorwf	months_display@Htemp^0,w,c
   993  007E92  A4D8               	btfss	status,2,c
   994  007E94  EF4E  F03F         	goto	u111
   995  007E98  EF50  F03F         	goto	u110
   996  007E9C                     u111:
   997  007E9C  EF58  F03F         	goto	l1120
   998  007EA0                     u110:
   999  007EA0                     
  1000                           ;ds1307_driver.c: 80:                 lcd_string(months[9]);
  1001  007EA0  0E87               	movlw	low (_months+135)
  1002  007EA2  6E29               	movwf	lcd_string@str^0,c
  1003  007EA4  0E01               	movlw	high (_months+135)
  1004  007EA6  6E2A               	movwf	(lcd_string@str+1)^0,c
  1005  007EA8  EC0A  F03D         	call	_lcd_string	;wreg free
  1006                           
  1007                           ;ds1307_driver.c: 81:             } else {
  1008  007EAC  EFFF  F03F         	goto	l48
  1009  007EB0                     l1120:
  1010                           
  1011                           ;ds1307_driver.c: 82:                 lcd_string(error);
  1012  007EB0  0E0F               	movlw	low _error
  1013  007EB2  6E29               	movwf	lcd_string@str^0,c
  1014  007EB4  0E00               	movlw	high _error
  1015  007EB6  6E2A               	movwf	(lcd_string@str+1)^0,c
  1016  007EB8  EC0A  F03D         	call	_lcd_string	;wreg free
  1017  007EBC  EFFF  F03F         	goto	l48
  1018  007EC0                     l1122:
  1019                           
  1020                           ;ds1307_driver.c: 86:             if(Htemp == (0x31)) {
  1021  007EC0  0E31               	movlw	49
  1022  007EC2  182F               	xorwf	months_display@Htemp^0,w,c
  1023  007EC4  A4D8               	btfss	status,2,c
  1024  007EC6  EF67  F03F         	goto	u121
  1025  007ECA  EF69  F03F         	goto	u120
  1026  007ECE                     u121:
  1027  007ECE  EF71  F03F         	goto	l1126
  1028  007ED2                     u120:
  1029  007ED2                     
  1030                           ;ds1307_driver.c: 87:                 lcd_string(months[10]);
  1031  007ED2  0E96               	movlw	low (_months+150)
  1032  007ED4  6E29               	movwf	lcd_string@str^0,c
  1033  007ED6  0E01               	movlw	high (_months+150)
  1034  007ED8  6E2A               	movwf	(lcd_string@str+1)^0,c
  1035  007EDA  EC0A  F03D         	call	_lcd_string	;wreg free
  1036                           
  1037                           ;ds1307_driver.c: 88:             } else {
  1038  007EDE  EFFF  F03F         	goto	l48
  1039  007EE2                     l1126:
  1040                           
  1041                           ;ds1307_driver.c: 89:                 lcd_string(months[0]);
  1042  007EE2  0E00               	movlw	low _months
  1043  007EE4  6E29               	movwf	lcd_string@str^0,c
  1044  007EE6  0E01               	movlw	high _months
  1045  007EE8  6E2A               	movwf	(lcd_string@str+1)^0,c
  1046  007EEA  EC0A  F03D         	call	_lcd_string	;wreg free
  1047  007EEE  EFFF  F03F         	goto	l48
  1048  007EF2                     l1128:
  1049                           
  1050                           ;ds1307_driver.c: 93:             if(Htemp == (0x31)) {
  1051  007EF2  0E31               	movlw	49
  1052  007EF4  182F               	xorwf	months_display@Htemp^0,w,c
  1053  007EF6  A4D8               	btfss	status,2,c
  1054  007EF8  EF80  F03F         	goto	u131
  1055  007EFC  EF82  F03F         	goto	u130
  1056  007F00                     u131:
  1057  007F00  EF8A  F03F         	goto	l1132
  1058  007F04                     u130:
  1059  007F04                     
  1060                           ;ds1307_driver.c: 94:                 lcd_string(months[11]);
  1061  007F04  0EA5               	movlw	low (_months+165)
  1062  007F06  6E29               	movwf	lcd_string@str^0,c
  1063  007F08  0E01               	movlw	high (_months+165)
  1064  007F0A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1065  007F0C  EC0A  F03D         	call	_lcd_string	;wreg free
  1066                           
  1067                           ;ds1307_driver.c: 95:             } else {
  1068  007F10  EFFF  F03F         	goto	l48
  1069  007F14                     l1132:
  1070                           
  1071                           ;ds1307_driver.c: 96:                 lcd_string(months[1]);
  1072  007F14  0E0F               	movlw	low (_months+15)
  1073  007F16  6E29               	movwf	lcd_string@str^0,c
  1074  007F18  0E01               	movlw	high (_months+15)
  1075  007F1A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1076  007F1C  EC0A  F03D         	call	_lcd_string	;wreg free
  1077  007F20  EFFF  F03F         	goto	l48
  1078  007F24                     l1134:
  1079                           
  1080                           ;ds1307_driver.c: 100:             lcd_string(months[2]);
  1081  007F24  0E1E               	movlw	low (_months+30)
  1082  007F26  6E29               	movwf	lcd_string@str^0,c
  1083  007F28  0E01               	movlw	high (_months+30)
  1084  007F2A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1085  007F2C  EC0A  F03D         	call	_lcd_string	;wreg free
  1086                           
  1087                           ;ds1307_driver.c: 101:             break;
  1088  007F30  EFFF  F03F         	goto	l48
  1089  007F34                     l1136:
  1090                           
  1091                           ;ds1307_driver.c: 103:             lcd_string(months[3]);
  1092  007F34  0E2D               	movlw	low (_months+45)
  1093  007F36  6E29               	movwf	lcd_string@str^0,c
  1094  007F38  0E01               	movlw	high (_months+45)
  1095  007F3A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1096  007F3C  EC0A  F03D         	call	_lcd_string	;wreg free
  1097                           
  1098                           ;ds1307_driver.c: 104:             break;
  1099  007F40  EFFF  F03F         	goto	l48
  1100  007F44                     l1138:
  1101                           
  1102                           ;ds1307_driver.c: 106:             lcd_string(months[4]);
  1103  007F44  0E3C               	movlw	low (_months+60)
  1104  007F46  6E29               	movwf	lcd_string@str^0,c
  1105  007F48  0E01               	movlw	high (_months+60)
  1106  007F4A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1107  007F4C  EC0A  F03D         	call	_lcd_string	;wreg free
  1108                           
  1109                           ;ds1307_driver.c: 107:             break;
  1110  007F50  EFFF  F03F         	goto	l48
  1111  007F54                     l1140:
  1112                           
  1113                           ;ds1307_driver.c: 109:             lcd_string(months[5]);
  1114  007F54  0E4B               	movlw	low (_months+75)
  1115  007F56  6E29               	movwf	lcd_string@str^0,c
  1116  007F58  0E01               	movlw	high (_months+75)
  1117  007F5A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1118  007F5C  EC0A  F03D         	call	_lcd_string	;wreg free
  1119                           
  1120                           ;ds1307_driver.c: 110:             break;
  1121  007F60  EFFF  F03F         	goto	l48
  1122  007F64                     l1142:
  1123                           
  1124                           ;ds1307_driver.c: 112:             lcd_string(months[6]);
  1125  007F64  0E5A               	movlw	low (_months+90)
  1126  007F66  6E29               	movwf	lcd_string@str^0,c
  1127  007F68  0E01               	movlw	high (_months+90)
  1128  007F6A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1129  007F6C  EC0A  F03D         	call	_lcd_string	;wreg free
  1130                           
  1131                           ;ds1307_driver.c: 113:             break;
  1132  007F70  EFFF  F03F         	goto	l48
  1133  007F74                     l1144:
  1134                           
  1135                           ;ds1307_driver.c: 115:             lcd_string(months[7]);
  1136  007F74  0E69               	movlw	low (_months+105)
  1137  007F76  6E29               	movwf	lcd_string@str^0,c
  1138  007F78  0E01               	movlw	high (_months+105)
  1139  007F7A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1140  007F7C  EC0A  F03D         	call	_lcd_string	;wreg free
  1141                           
  1142                           ;ds1307_driver.c: 116:             break;
  1143  007F80  EFFF  F03F         	goto	l48
  1144  007F84                     l1146:
  1145                           
  1146                           ;ds1307_driver.c: 118:             lcd_string(months[8]);
  1147  007F84  0E78               	movlw	low (_months+120)
  1148  007F86  6E29               	movwf	lcd_string@str^0,c
  1149  007F88  0E01               	movlw	high (_months+120)
  1150  007F8A  6E2A               	movwf	(lcd_string@str+1)^0,c
  1151  007F8C  EC0A  F03D         	call	_lcd_string	;wreg free
  1152                           
  1153                           ;ds1307_driver.c: 119:             break;
  1154  007F90  EFFF  F03F         	goto	l48
  1155  007F94                     l1150:
  1156  007F94  502E               	movf	months_display@Ltemp^0,w,c
  1157  007F96  6E2B               	movwf	??_months_display^0,c
  1158  007F98  6A2C               	clrf	(??_months_display+1)^0,c
  1159                           
  1160                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1161                           ; Switch size 1, requested type "simple"
  1162                           ; Number of cases is 1, Range of values is 0 to 0
  1163                           ; switch strategies available:
  1164                           ; Name         Instructions Cycles
  1165                           ; simple_byte            4     3 (average)
  1166                           ;	Chosen strategy is simple_byte
  1167  007F9A  502C               	movf	(??_months_display+1)^0,w,c
  1168  007F9C  0A00               	xorlw	0	; case 0
  1169  007F9E  B4D8               	btfsc	status,2,c
  1170  007FA0  EFD4  F03F         	goto	l1196
  1171  007FA4  EF58  F03F         	goto	l1120
  1172  007FA8                     l1196:
  1173                           
  1174                           ; Switch size 1, requested type "simple"
  1175                           ; Number of cases is 10, Range of values is 48 to 57
  1176                           ; switch strategies available:
  1177                           ; Name         Instructions Cycles
  1178                           ; simple_byte           31    16 (average)
  1179                           ;	Chosen strategy is simple_byte
  1180  007FA8  502B               	movf	??_months_display^0,w,c
  1181  007FAA  0A30               	xorlw	48	; case 48
  1182  007FAC  B4D8               	btfsc	status,2,c
  1183  007FAE  EF47  F03F         	goto	l1116
  1184  007FB2  0A01               	xorlw	1	; case 49
  1185  007FB4  B4D8               	btfsc	status,2,c
  1186  007FB6  EF60  F03F         	goto	l1122
  1187  007FBA  0A03               	xorlw	3	; case 50
  1188  007FBC  B4D8               	btfsc	status,2,c
  1189  007FBE  EF79  F03F         	goto	l1128
  1190  007FC2  0A01               	xorlw	1	; case 51
  1191  007FC4  B4D8               	btfsc	status,2,c
  1192  007FC6  EF92  F03F         	goto	l1134
  1193  007FCA  0A07               	xorlw	7	; case 52
  1194  007FCC  B4D8               	btfsc	status,2,c
  1195  007FCE  EF9A  F03F         	goto	l1136
  1196  007FD2  0A01               	xorlw	1	; case 53
  1197  007FD4  B4D8               	btfsc	status,2,c
  1198  007FD6  EFA2  F03F         	goto	l1138
  1199  007FDA  0A03               	xorlw	3	; case 54
  1200  007FDC  B4D8               	btfsc	status,2,c
  1201  007FDE  EFAA  F03F         	goto	l1140
  1202  007FE2  0A01               	xorlw	1	; case 55
  1203  007FE4  B4D8               	btfsc	status,2,c
  1204  007FE6  EFB2  F03F         	goto	l1142
  1205  007FEA  0A0F               	xorlw	15	; case 56
  1206  007FEC  B4D8               	btfsc	status,2,c
  1207  007FEE  EFBA  F03F         	goto	l1144
  1208  007FF2  0A01               	xorlw	1	; case 57
  1209  007FF4  B4D8               	btfsc	status,2,c
  1210  007FF6  EFC2  F03F         	goto	l1146
  1211  007FFA  EF58  F03F         	goto	l1120
  1212  007FFE                     l48:
  1213  007FFE  0012               	return		;funcret
  1214  008000                     __end_of_months_display:
  1215                           	callstack 0
  1216                           
  1217 ;; *************** function _lcd_init *****************
  1218 ;; Defined at:
  1219 ;;		line 11 in file "lcd16x2_driver.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;		None
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;		None
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, status,2, status,0, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1233 ;;      Params:         0       0       0       0       0       0       0       0       0
  1234 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1235 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1236 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1237 ;;Total ram usage:        1 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    1
  1240 ;; This function calls:
  1241 ;;		_lcd_command
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text4
  1248  007A44                     __ptext4:
  1249                           	callstack 0
  1250  007A44                     _lcd_init:
  1251                           	callstack 29
  1252  007A44                     
  1253                           ;lcd16x2_driver.c: 12:     TRISB = 0;
  1254  007A44  0E00               	movlw	0
  1255  007A46  6E93               	movwf	147,c	;volatile
  1256  007A48                     
  1257                           ;lcd16x2_driver.c: 13:     _delay((unsigned long)((15)*(40000000UL/4000.0)));
  1258  007A48  0EC3               	movlw	195
  1259  007A4A  6E29               	movwf	??_lcd_init^0,c
  1260  007A4C  0ECD               	movlw	205
  1261  007A4E                     u157:
  1262  007A4E  2EE8               	decfsz	wreg,f,c
  1263  007A50  D7FE               	bra	u157
  1264  007A52  2E29               	decfsz	??_lcd_init^0,f,c
  1265  007A54  D7FC               	bra	u157
  1266  007A56  F000               	nop	
  1267  007A58                     
  1268                           ;lcd16x2_driver.c: 14:     lcd_command(0x02);
  1269  007A58  0E02               	movlw	2
  1270  007A5A  EC65  F03D         	call	_lcd_command
  1271  007A5E                     
  1272                           ;lcd16x2_driver.c: 15:     lcd_command(0x28);
  1273  007A5E  0E28               	movlw	40
  1274  007A60  EC65  F03D         	call	_lcd_command
  1275  007A64                     
  1276                           ;lcd16x2_driver.c: 16:     lcd_command(0x01);
  1277  007A64  0E01               	movlw	1
  1278  007A66  EC65  F03D         	call	_lcd_command
  1279  007A6A                     
  1280                           ;lcd16x2_driver.c: 17:     lcd_command(0x0c);
  1281  007A6A  0E0C               	movlw	12
  1282  007A6C  EC65  F03D         	call	_lcd_command
  1283  007A70                     
  1284                           ;lcd16x2_driver.c: 18:     lcd_command(0x06);
  1285  007A70  0E06               	movlw	6
  1286  007A72  EC65  F03D         	call	_lcd_command
  1287  007A76  0012               	return		;funcret
  1288  007A78                     __end_of_lcd_init:
  1289                           	callstack 0
  1290                           
  1291 ;; *************** function _lcd_command *****************
  1292 ;; Defined at:
  1293 ;;		line 25 in file "lcd16x2_driver.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  cmd             1    wreg     unsigned char 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  cmd             1    1[COMRAM] unsigned char 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1307 ;;      Params:         0       0       0       0       0       0       0       0       0
  1308 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1309 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1310 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1311 ;;Total ram usage:        2 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_lcd_init
  1317 ;;		_main
  1318 ;;		_lcd_clear
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text5
  1323  007ACA                     __ptext5:
  1324                           	callstack 0
  1325  007ACA                     _lcd_command:
  1326                           	callstack 29
  1327                           
  1328                           ;incstack = 0
  1329                           ;lcd_command@cmd stored from wreg
  1330  007ACA  6E28               	movwf	lcd_command@cmd^0,c
  1331  007ACC                     
  1332                           ;lcd16x2_driver.c: 26:     LATB = (LATB & 0x0f) | (0xF0 & cmd);
  1333  007ACC  C028  F027         	movff	lcd_command@cmd,??_lcd_command
  1334  007AD0  0EF0               	movlw	240
  1335  007AD2  1627               	andwf	??_lcd_command^0,f,c
  1336  007AD4  508A               	movf	138,w,c	;volatile
  1337  007AD6  0B0F               	andlw	15
  1338  007AD8  1027               	iorwf	??_lcd_command^0,w,c
  1339  007ADA  6E8A               	movwf	138,c	;volatile
  1340  007ADC                     
  1341                           ;lcd16x2_driver.c: 27:     LATB0 = 0;
  1342  007ADC  908A               	bcf	3978,0,c	;volatile
  1343  007ADE                     
  1344                           ;lcd16x2_driver.c: 28:     LATB1 = 1;
  1345  007ADE  828A               	bsf	3978,1,c	;volatile
  1346  007AE0                     
  1347                           ;lcd16x2_driver.c: 29:     __nop();
  1348  007AE0  F000               	nop	
  1349  007AE2                     
  1350                           ;lcd16x2_driver.c: 30:     LATB1 = 0;
  1351  007AE2  928A               	bcf	3978,1,c	;volatile
  1352  007AE4                     
  1353                           ;lcd16x2_driver.c: 31:     _delay((unsigned long)((1)*(40000000UL/4000.0)));
  1354  007AE4  0E0D               	movlw	13
  1355  007AE6  6E27               	movwf	??_lcd_command^0,c
  1356  007AE8  0EFC               	movlw	252
  1357  007AEA                     u167:
  1358  007AEA  2EE8               	decfsz	wreg,f,c
  1359  007AEC  D7FE               	bra	u167
  1360  007AEE  2E27               	decfsz	??_lcd_command^0,f,c
  1361  007AF0  D7FC               	bra	u167
  1362  007AF2                     
  1363                           ;lcd16x2_driver.c: 32:     LATB = (LATB & 0x0f) | (cmd<<4);
  1364  007AF2  C028  F027         	movff	lcd_command@cmd,??_lcd_command
  1365  007AF6  3A27               	swapf	??_lcd_command^0,f,c
  1366  007AF8  0EF0               	movlw	240
  1367  007AFA  1627               	andwf	??_lcd_command^0,f,c
  1368  007AFC  508A               	movf	138,w,c	;volatile
  1369  007AFE  0B0F               	andlw	15
  1370  007B00  1027               	iorwf	??_lcd_command^0,w,c
  1371  007B02  6E8A               	movwf	138,c	;volatile
  1372  007B04                     
  1373                           ;lcd16x2_driver.c: 33:     LATB1 = 1;
  1374  007B04  828A               	bsf	3978,1,c	;volatile
  1375  007B06                     
  1376                           ;lcd16x2_driver.c: 34:     __nop();
  1377  007B06  F000               	nop	
  1378  007B08                     
  1379                           ;lcd16x2_driver.c: 35:     LATB1 = 0;
  1380  007B08  928A               	bcf	3978,1,c	;volatile
  1381                           
  1382                           ;lcd16x2_driver.c: 36:     _delay((unsigned long)((3)*(40000000UL/4000.0)));
  1383  007B0A  0E27               	movlw	39
  1384  007B0C  6E27               	movwf	??_lcd_command^0,c
  1385  007B0E  0EF5               	movlw	245
  1386  007B10                     u177:
  1387  007B10  2EE8               	decfsz	wreg,f,c
  1388  007B12  D7FE               	bra	u177
  1389  007B14  2E27               	decfsz	??_lcd_command^0,f,c
  1390  007B16  D7FC               	bra	u177
  1391  007B18  F000               	nop	
  1392  007B1A  0012               	return		;funcret
  1393  007B1C                     __end_of_lcd_command:
  1394                           	callstack 0
  1395                           
  1396 ;; *************** function _days_display *****************
  1397 ;; Defined at:
  1398 ;;		line 30 in file "ds1307_driver.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  bcd             1    wreg     unsigned char 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  bcd             1    6[COMRAM] unsigned char 
  1403 ;;  temp            1    7[COMRAM] unsigned char 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1413 ;;      Params:         0       0       0       0       0       0       0       0       0
  1414 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1415 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1416 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1417 ;;Total ram usage:        4 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    2
  1420 ;; This function calls:
  1421 ;;		_lcd_string
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text6
  1428  007D82                     __ptext6:
  1429                           	callstack 0
  1430  007D82                     _days_display:
  1431                           	callstack 28
  1432                           
  1433                           ;incstack = 0
  1434                           ;days_display@bcd stored from wreg
  1435  007D82  6E2D               	movwf	days_display@bcd^0,c
  1436  007D84                     
  1437                           ;ds1307_driver.c: 31:     unsigned char temp;;ds1307_driver.c: 33:     temp = bcd;
  1438  007D84  C02D  F02E         	movff	days_display@bcd,days_display@temp
  1439  007D88                     
  1440                           ;ds1307_driver.c: 34:     temp = temp & 0x0F;
  1441  007D88  502E               	movf	days_display@temp^0,w,c
  1442  007D8A  0B0F               	andlw	15
  1443  007D8C  6E2E               	movwf	days_display@temp^0,c
  1444  007D8E                     
  1445                           ;ds1307_driver.c: 35:     temp = temp | 0x30;
  1446  007D8E  502E               	movf	days_display@temp^0,w,c
  1447  007D90  0930               	iorlw	48
  1448  007D92  6E2E               	movwf	days_display@temp^0,c
  1449                           
  1450                           ;ds1307_driver.c: 37:     switch(temp){
  1451  007D94  EF0C  F03F         	goto	l1100
  1452  007D98                     l1084:
  1453                           
  1454                           ;ds1307_driver.c: 39:             lcd_string(days[6]);
  1455  007D98  0E9C               	movlw	low (_days+60)
  1456  007D9A  6E29               	movwf	lcd_string@str^0,c
  1457  007D9C  0E00               	movlw	high (_days+60)
  1458  007D9E  6E2A               	movwf	(lcd_string@str+1)^0,c
  1459  007DA0  EC0A  F03D         	call	_lcd_string	;wreg free
  1460                           
  1461                           ;ds1307_driver.c: 40:             break;
  1462  007DA4  EF35  F03F         	goto	l26
  1463  007DA8                     l1086:
  1464                           
  1465                           ;ds1307_driver.c: 42:             lcd_string(days[0]);
  1466  007DA8  0E60               	movlw	low _days
  1467  007DAA  6E29               	movwf	lcd_string@str^0,c
  1468  007DAC  0E00               	movlw	high _days
  1469  007DAE  6E2A               	movwf	(lcd_string@str+1)^0,c
  1470  007DB0  EC0A  F03D         	call	_lcd_string	;wreg free
  1471                           
  1472                           ;ds1307_driver.c: 43:             break;
  1473  007DB4  EF35  F03F         	goto	l26
  1474  007DB8                     l1088:
  1475                           
  1476                           ;ds1307_driver.c: 45:             lcd_string(days[1]);
  1477  007DB8  0E6A               	movlw	low (_days+10)
  1478  007DBA  6E29               	movwf	lcd_string@str^0,c
  1479  007DBC  0E00               	movlw	high (_days+10)
  1480  007DBE  6E2A               	movwf	(lcd_string@str+1)^0,c
  1481  007DC0  EC0A  F03D         	call	_lcd_string	;wreg free
  1482                           
  1483                           ;ds1307_driver.c: 46:             break;
  1484  007DC4  EF35  F03F         	goto	l26
  1485  007DC8                     l1090:
  1486                           
  1487                           ;ds1307_driver.c: 48:             lcd_string(days[2]);
  1488  007DC8  0E74               	movlw	low (_days+20)
  1489  007DCA  6E29               	movwf	lcd_string@str^0,c
  1490  007DCC  0E00               	movlw	high (_days+20)
  1491  007DCE  6E2A               	movwf	(lcd_string@str+1)^0,c
  1492  007DD0  EC0A  F03D         	call	_lcd_string	;wreg free
  1493                           
  1494                           ;ds1307_driver.c: 49:             break;
  1495  007DD4  EF35  F03F         	goto	l26
  1496  007DD8                     l1092:
  1497                           
  1498                           ;ds1307_driver.c: 51:             lcd_string(days[3]);
  1499  007DD8  0E7E               	movlw	low (_days+30)
  1500  007DDA  6E29               	movwf	lcd_string@str^0,c
  1501  007DDC  0E00               	movlw	high (_days+30)
  1502  007DDE  6E2A               	movwf	(lcd_string@str+1)^0,c
  1503  007DE0  EC0A  F03D         	call	_lcd_string	;wreg free
  1504                           
  1505                           ;ds1307_driver.c: 52:             break;
  1506  007DE4  EF35  F03F         	goto	l26
  1507  007DE8                     l1094:
  1508                           
  1509                           ;ds1307_driver.c: 54:             lcd_string(days[4]);
  1510  007DE8  0E88               	movlw	low (_days+40)
  1511  007DEA  6E29               	movwf	lcd_string@str^0,c
  1512  007DEC  0E00               	movlw	high (_days+40)
  1513  007DEE  6E2A               	movwf	(lcd_string@str+1)^0,c
  1514  007DF0  EC0A  F03D         	call	_lcd_string	;wreg free
  1515                           
  1516                           ;ds1307_driver.c: 55:             break;
  1517  007DF4  EF35  F03F         	goto	l26
  1518  007DF8                     l1096:
  1519                           
  1520                           ;ds1307_driver.c: 57:             lcd_string(days[5]);
  1521  007DF8  0E92               	movlw	low (_days+50)
  1522  007DFA  6E29               	movwf	lcd_string@str^0,c
  1523  007DFC  0E00               	movlw	high (_days+50)
  1524  007DFE  6E2A               	movwf	(lcd_string@str+1)^0,c
  1525  007E00  EC0A  F03D         	call	_lcd_string	;wreg free
  1526                           
  1527                           ;ds1307_driver.c: 58:             break;
  1528  007E04  EF35  F03F         	goto	l26
  1529  007E08                     l1098:
  1530                           
  1531                           ;ds1307_driver.c: 61:             lcd_string(error);
  1532  007E08  0E0F               	movlw	low _error
  1533  007E0A  6E29               	movwf	lcd_string@str^0,c
  1534  007E0C  0E00               	movlw	high _error
  1535  007E0E  6E2A               	movwf	(lcd_string@str+1)^0,c
  1536  007E10  EC0A  F03D         	call	_lcd_string	;wreg free
  1537                           
  1538                           ;ds1307_driver.c: 62:     }
  1539  007E14  EF35  F03F         	goto	l26
  1540  007E18                     l1100:
  1541  007E18  502E               	movf	days_display@temp^0,w,c
  1542  007E1A  6E2B               	movwf	??_days_display^0,c
  1543  007E1C  6A2C               	clrf	(??_days_display+1)^0,c
  1544                           
  1545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1546                           ; Switch size 1, requested type "simple"
  1547                           ; Number of cases is 1, Range of values is 0 to 0
  1548                           ; switch strategies available:
  1549                           ; Name         Instructions Cycles
  1550                           ; simple_byte            4     3 (average)
  1551                           ;	Chosen strategy is simple_byte
  1552  007E1E  502C               	movf	(??_days_display+1)^0,w,c
  1553  007E20  0A00               	xorlw	0	; case 0
  1554  007E22  B4D8               	btfsc	status,2,c
  1555  007E24  EF16  F03F         	goto	l1198
  1556  007E28  EF04  F03F         	goto	l1098
  1557  007E2C                     l1198:
  1558                           
  1559                           ; Switch size 1, requested type "simple"
  1560                           ; Number of cases is 7, Range of values is 49 to 55
  1561                           ; switch strategies available:
  1562                           ; Name         Instructions Cycles
  1563                           ; simple_byte           22    12 (average)
  1564                           ;	Chosen strategy is simple_byte
  1565  007E2C  502B               	movf	??_days_display^0,w,c
  1566  007E2E  0A31               	xorlw	49	; case 49
  1567  007E30  B4D8               	btfsc	status,2,c
  1568  007E32  EFCC  F03E         	goto	l1084
  1569  007E36  0A03               	xorlw	3	; case 50
  1570  007E38  B4D8               	btfsc	status,2,c
  1571  007E3A  EFD4  F03E         	goto	l1086
  1572  007E3E  0A01               	xorlw	1	; case 51
  1573  007E40  B4D8               	btfsc	status,2,c
  1574  007E42  EFDC  F03E         	goto	l1088
  1575  007E46  0A07               	xorlw	7	; case 52
  1576  007E48  B4D8               	btfsc	status,2,c
  1577  007E4A  EFE4  F03E         	goto	l1090
  1578  007E4E  0A01               	xorlw	1	; case 53
  1579  007E50  B4D8               	btfsc	status,2,c
  1580  007E52  EFEC  F03E         	goto	l1092
  1581  007E56  0A03               	xorlw	3	; case 54
  1582  007E58  B4D8               	btfsc	status,2,c
  1583  007E5A  EFF4  F03E         	goto	l1094
  1584  007E5E  0A01               	xorlw	1	; case 55
  1585  007E60  B4D8               	btfsc	status,2,c
  1586  007E62  EFFC  F03E         	goto	l1096
  1587  007E66  EF04  F03F         	goto	l1098
  1588  007E6A                     l26:
  1589  007E6A  0012               	return		;funcret
  1590  007E6C                     __end_of_days_display:
  1591                           	callstack 0
  1592                           
  1593 ;; *************** function _lcd_string *****************
  1594 ;; Defined at:
  1595 ;;		line 53 in file "lcd16x2_driver.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  str             2    2[COMRAM] PTR const unsigned char 
  1598 ;;		 -> dash(2), point(3), colon(2), months(225), 
  1599 ;;		 -> error(7), days(100), 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1611 ;;      Params:         2       0       0       0       0       0       0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1614 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1615 ;;Total ram usage:        2 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    1
  1618 ;; This function calls:
  1619 ;;		_lcd_data
  1620 ;; This function is called by:
  1621 ;;		_days_display
  1622 ;;		_months_display
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text7
  1628  007A14                     __ptext7:
  1629                           	callstack 0
  1630  007A14                     _lcd_string:
  1631                           	callstack 28
  1632  007A14                     
  1633                           ;lcd16x2_driver.c: 54:     while((*str)!=0)
  1634  007A14  EF15  F03D         	goto	l1076
  1635  007A18                     l1072:
  1636                           
  1637                           ;lcd16x2_driver.c: 55:     {;lcd16x2_driver.c: 56:       lcd_data(*str);
  1638  007A18  C029  FFD9         	movff	lcd_string@str,fsr2l
  1639  007A1C  C02A  FFDA         	movff	lcd_string@str+1,fsr2h
  1640  007A20  50DF               	movf	indf2,w,c
  1641  007A22  EC3C  F03D         	call	_lcd_data
  1642  007A26                     
  1643                           ;lcd16x2_driver.c: 57:       str++;
  1644  007A26  4A29               	infsnz	lcd_string@str^0,f,c
  1645  007A28  2A2A               	incf	(lcd_string@str+1)^0,f,c
  1646  007A2A                     l1076:
  1647                           
  1648                           ;lcd16x2_driver.c: 54:     while((*str)!=0)
  1649  007A2A  C029  FFD9         	movff	lcd_string@str,fsr2l
  1650  007A2E  C02A  FFDA         	movff	lcd_string@str+1,fsr2h
  1651  007A32  50DF               	movf	indf2,w,c
  1652  007A34  A4D8               	btfss	status,2,c
  1653  007A36  EF1F  F03D         	goto	u101
  1654  007A3A  EF21  F03D         	goto	u100
  1655  007A3E                     u101:
  1656  007A3E  EF0C  F03D         	goto	l1072
  1657  007A42                     u100:
  1658  007A42  0012               	return		;funcret
  1659  007A44                     __end_of_lcd_string:
  1660                           	callstack 0
  1661                           
  1662 ;; *************** function _ascii_display *****************
  1663 ;; Defined at:
  1664 ;;		line 16 in file "ds1307_driver.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  bcd             1    wreg     unsigned char 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  bcd             1    2[COMRAM] unsigned char 
  1669 ;;  temp            1    3[COMRAM] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0
  1680 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1682 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1683 ;;Total ram usage:        2 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    1
  1686 ;; This function calls:
  1687 ;;		_lcd_data
  1688 ;; This function is called by:
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text8
  1694  0079E8                     __ptext8:
  1695                           	callstack 0
  1696  0079E8                     _ascii_display:
  1697                           	callstack 29
  1698                           
  1699                           ;incstack = 0
  1700                           ;ascii_display@bcd stored from wreg
  1701  0079E8  6E29               	movwf	ascii_display@bcd^0,c
  1702  0079EA                     
  1703                           ;ds1307_driver.c: 17:     unsigned char temp;;ds1307_driver.c: 20:     temp = bcd;
  1704  0079EA  C029  F02A         	movff	ascii_display@bcd,ascii_display@temp
  1705  0079EE                     
  1706                           ;ds1307_driver.c: 21:     temp = (temp >> 4) | 0x30;
  1707  0079EE  382A               	swapf	ascii_display@temp^0,w,c
  1708  0079F0  0B0F               	andlw	15
  1709  0079F2  0930               	iorlw	48
  1710  0079F4  6E2A               	movwf	ascii_display@temp^0,c
  1711  0079F6                     
  1712                           ;ds1307_driver.c: 22:     lcd_data(temp);
  1713  0079F6  502A               	movf	ascii_display@temp^0,w,c
  1714  0079F8  EC3C  F03D         	call	_lcd_data
  1715  0079FC                     
  1716                           ;ds1307_driver.c: 24:     temp = bcd;
  1717  0079FC  C029  F02A         	movff	ascii_display@bcd,ascii_display@temp
  1718  007A00                     
  1719                           ;ds1307_driver.c: 25:     temp = temp & 0x0F;
  1720  007A00  502A               	movf	ascii_display@temp^0,w,c
  1721  007A02  0B0F               	andlw	15
  1722  007A04  6E2A               	movwf	ascii_display@temp^0,c
  1723  007A06                     
  1724                           ;ds1307_driver.c: 26:     temp = temp | 0x30;
  1725  007A06  502A               	movf	ascii_display@temp^0,w,c
  1726  007A08  0930               	iorlw	48
  1727  007A0A  6E2A               	movwf	ascii_display@temp^0,c
  1728  007A0C                     
  1729                           ;ds1307_driver.c: 27:     lcd_data(temp);
  1730  007A0C  502A               	movf	ascii_display@temp^0,w,c
  1731  007A0E  EC3C  F03D         	call	_lcd_data
  1732  007A12  0012               	return		;funcret
  1733  007A14                     __end_of_ascii_display:
  1734                           	callstack 0
  1735                           
  1736 ;; *************** function _lcd_data *****************
  1737 ;; Defined at:
  1738 ;;		line 39 in file "lcd16x2_driver.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  dat             1    wreg     unsigned char 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  dat             1    1[COMRAM] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0
  1753 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1754 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1755 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1756 ;;Total ram usage:        2 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_ascii_display
  1762 ;;		_lcd_string
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text9
  1767  007A78                     __ptext9:
  1768                           	callstack 0
  1769  007A78                     _lcd_data:
  1770                           	callstack 28
  1771                           
  1772                           ;incstack = 0
  1773                           ;lcd_data@dat stored from wreg
  1774  007A78  6E28               	movwf	lcd_data@dat^0,c
  1775  007A7A                     
  1776                           ;lcd16x2_driver.c: 40:     LATB = (LATB & 0x0f) | (0xF0 & dat);
  1777  007A7A  C028  F027         	movff	lcd_data@dat,??_lcd_data
  1778  007A7E  0EF0               	movlw	240
  1779  007A80  1627               	andwf	??_lcd_data^0,f,c
  1780  007A82  508A               	movf	138,w,c	;volatile
  1781  007A84  0B0F               	andlw	15
  1782  007A86  1027               	iorwf	??_lcd_data^0,w,c
  1783  007A88  6E8A               	movwf	138,c	;volatile
  1784  007A8A                     
  1785                           ;lcd16x2_driver.c: 41:     LATB0 = 1;
  1786  007A8A  808A               	bsf	3978,0,c	;volatile
  1787  007A8C                     
  1788                           ;lcd16x2_driver.c: 42:     LATB1 = 1;
  1789  007A8C  828A               	bsf	3978,1,c	;volatile
  1790  007A8E                     
  1791                           ;lcd16x2_driver.c: 43:     __nop();
  1792  007A8E  F000               	nop	
  1793  007A90                     
  1794                           ;lcd16x2_driver.c: 44:     LATB1 = 0;
  1795  007A90  928A               	bcf	3978,1,c	;volatile
  1796  007A92                     
  1797                           ;lcd16x2_driver.c: 45:     _delay((unsigned long)((1)*(40000000UL/4000.0)));
  1798  007A92  0E0D               	movlw	13
  1799  007A94  6E27               	movwf	??_lcd_data^0,c
  1800  007A96  0EFC               	movlw	252
  1801  007A98                     u187:
  1802  007A98  2EE8               	decfsz	wreg,f,c
  1803  007A9A  D7FE               	bra	u187
  1804  007A9C  2E27               	decfsz	??_lcd_data^0,f,c
  1805  007A9E  D7FC               	bra	u187
  1806  007AA0                     
  1807                           ;lcd16x2_driver.c: 46:     LATB = (LATB & 0x0f) | (dat<<4);
  1808  007AA0  C028  F027         	movff	lcd_data@dat,??_lcd_data
  1809  007AA4  3A27               	swapf	??_lcd_data^0,f,c
  1810  007AA6  0EF0               	movlw	240
  1811  007AA8  1627               	andwf	??_lcd_data^0,f,c
  1812  007AAA  508A               	movf	138,w,c	;volatile
  1813  007AAC  0B0F               	andlw	15
  1814  007AAE  1027               	iorwf	??_lcd_data^0,w,c
  1815  007AB0  6E8A               	movwf	138,c	;volatile
  1816  007AB2                     
  1817                           ;lcd16x2_driver.c: 47:     LATB1 = 1;
  1818  007AB2  828A               	bsf	3978,1,c	;volatile
  1819  007AB4                     
  1820                           ;lcd16x2_driver.c: 48:     __nop();
  1821  007AB4  F000               	nop	
  1822  007AB6                     
  1823                           ;lcd16x2_driver.c: 49:     LATB1 = 0;
  1824  007AB6  928A               	bcf	3978,1,c	;volatile
  1825                           
  1826                           ;lcd16x2_driver.c: 50:     _delay((unsigned long)((3)*(40000000UL/4000.0)));
  1827  007AB8  0E27               	movlw	39
  1828  007ABA  6E27               	movwf	??_lcd_data^0,c
  1829  007ABC  0EF5               	movlw	245
  1830  007ABE                     u197:
  1831  007ABE  2EE8               	decfsz	wreg,f,c
  1832  007AC0  D7FE               	bra	u197
  1833  007AC2  2E27               	decfsz	??_lcd_data^0,f,c
  1834  007AC4  D7FC               	bra	u197
  1835  007AC6  F000               	nop	
  1836  007AC8  0012               	return		;funcret
  1837  007ACA                     __end_of_lcd_data:
  1838                           	callstack 0
  1839  0000                     
  1840                           	psect	rparam
  1841  0000                     
  1842                           	psect	idloc
  1843                           
  1844                           ;Config register IDLOC0 @ 0x200000
  1845                           ;	unspecified, using default values
  1846  200000                     	org	2097152
  1847  200000  FF                 	db	255
  1848                           
  1849                           ;Config register IDLOC1 @ 0x200001
  1850                           ;	unspecified, using default values
  1851  200001                     	org	2097153
  1852  200001  FF                 	db	255
  1853                           
  1854                           ;Config register IDLOC2 @ 0x200002
  1855                           ;	unspecified, using default values
  1856  200002                     	org	2097154
  1857  200002  FF                 	db	255
  1858                           
  1859                           ;Config register IDLOC3 @ 0x200003
  1860                           ;	unspecified, using default values
  1861  200003                     	org	2097155
  1862  200003  FF                 	db	255
  1863                           
  1864                           ;Config register IDLOC4 @ 0x200004
  1865                           ;	unspecified, using default values
  1866  200004                     	org	2097156
  1867  200004  FF                 	db	255
  1868                           
  1869                           ;Config register IDLOC5 @ 0x200005
  1870                           ;	unspecified, using default values
  1871  200005                     	org	2097157
  1872  200005  FF                 	db	255
  1873                           
  1874                           ;Config register IDLOC6 @ 0x200006
  1875                           ;	unspecified, using default values
  1876  200006                     	org	2097158
  1877  200006  FF                 	db	255
  1878                           
  1879                           ;Config register IDLOC7 @ 0x200007
  1880                           ;	unspecified, using default values
  1881  200007                     	org	2097159
  1882  200007  FF                 	db	255
  1883                           
  1884                           	psect	config
  1885                           
  1886                           ;Config register CONFIG1L @ 0x300000
  1887                           ;	PLL Prescaler Selection bits
  1888                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1889                           ;	System Clock Postscaler Selection bits
  1890                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1891                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1892                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1893  300000                     	org	3145728
  1894  300000  00                 	db	0
  1895                           
  1896                           ;Config register CONFIG1H @ 0x300001
  1897                           ;	Oscillator Selection bits
  1898                           ;	FOSC = HS, HS oscillator (HS)
  1899                           ;	Fail-Safe Clock Monitor Enable bit
  1900                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1901                           ;	Internal/External Oscillator Switchover bit
  1902                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1903  300001                     	org	3145729
  1904  300001  0C                 	db	12
  1905                           
  1906                           ;Config register CONFIG2L @ 0x300002
  1907                           ;	Power-up Timer Enable bit
  1908                           ;	PWRT = OFF, PWRT disabled
  1909                           ;	Brown-out Reset Enable bits
  1910                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1911                           ;	Brown-out Reset Voltage bits
  1912                           ;	BORV = 3, Minimum setting 2.05V
  1913                           ;	USB Voltage Regulator Enable bit
  1914                           ;	VREGEN = OFF, USB voltage regulator disabled
  1915  300002                     	org	3145730
  1916  300002  19                 	db	25
  1917                           
  1918                           ;Config register CONFIG2H @ 0x300003
  1919                           ;	Watchdog Timer Enable bit
  1920                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1921                           ;	Watchdog Timer Postscale Select bits
  1922                           ;	WDTPS = 32768, 1:32768
  1923  300003                     	org	3145731
  1924  300003  1E                 	db	30
  1925                           
  1926                           ; Padding undefined space
  1927  300004                     	org	3145732
  1928  300004  FF                 	db	255
  1929                           
  1930                           ;Config register CONFIG3H @ 0x300005
  1931                           ;	CCP2 MUX bit
  1932                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1933                           ;	PORTB A/D Enable bit
  1934                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1935                           ;	Low-Power Timer 1 Oscillator Enable bit
  1936                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1937                           ;	MCLR Pin Enable bit
  1938                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  1939  300005                     	org	3145733
  1940  300005  03                 	db	3
  1941                           
  1942                           ;Config register CONFIG4L @ 0x300006
  1943                           ;	Stack Full/Underflow Reset Enable bit
  1944                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1945                           ;	Single-Supply ICSP Enable bit
  1946                           ;	LVP = ON, Single-Supply ICSP enabled
  1947                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1948                           ;	ICPRT = OFF, ICPORT disabled
  1949                           ;	Extended Instruction Set Enable bit
  1950                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1951                           ;	Background Debugger Enable bit
  1952                           ;	DEBUG = 0x1, unprogrammed default
  1953  300006                     	org	3145734
  1954  300006  84                 	db	132
  1955                           
  1956                           ; Padding undefined space
  1957  300007                     	org	3145735
  1958  300007  FF                 	db	255
  1959                           
  1960                           ;Config register CONFIG5L @ 0x300008
  1961                           ;	Code Protection bit
  1962                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1963                           ;	Code Protection bit
  1964                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1965                           ;	Code Protection bit
  1966                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1967                           ;	Code Protection bit
  1968                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1969  300008                     	org	3145736
  1970  300008  0F                 	db	15
  1971                           
  1972                           ;Config register CONFIG5H @ 0x300009
  1973                           ;	Boot Block Code Protection bit
  1974                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1975                           ;	Data EEPROM Code Protection bit
  1976                           ;	CPD = OFF, Data EEPROM is not code-protected
  1977  300009                     	org	3145737
  1978  300009  C0                 	db	192
  1979                           
  1980                           ;Config register CONFIG6L @ 0x30000A
  1981                           ;	Write Protection bit
  1982                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1983                           ;	Write Protection bit
  1984                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1985                           ;	Write Protection bit
  1986                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1987                           ;	Write Protection bit
  1988                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1989  30000A                     	org	3145738
  1990  30000A  0F                 	db	15
  1991                           
  1992                           ;Config register CONFIG6H @ 0x30000B
  1993                           ;	Configuration Register Write Protection bit
  1994                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1995                           ;	Boot Block Write Protection bit
  1996                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1997                           ;	Data EEPROM Write Protection bit
  1998                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1999  30000B                     	org	3145739
  2000  30000B  E0                 	db	224
  2001                           
  2002                           ;Config register CONFIG7L @ 0x30000C
  2003                           ;	Table Read Protection bit
  2004                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2005                           ;	Table Read Protection bit
  2006                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2007                           ;	Table Read Protection bit
  2008                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2009                           ;	Table Read Protection bit
  2010                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2011  30000C                     	org	3145740
  2012  30000C  0F                 	db	15
  2013                           
  2014                           ;Config register CONFIG7H @ 0x30000D
  2015                           ;	Boot Block Table Read Protection bit
  2016                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2017  30000D                     	org	3145741
  2018  30000D  40                 	db	64
  2019                           tosu	equ	0xFFF
  2020                           tosh	equ	0xFFE
  2021                           tosl	equ	0xFFD
  2022                           stkptr	equ	0xFFC
  2023                           pclatu	equ	0xFFB
  2024                           pclath	equ	0xFFA
  2025                           pcl	equ	0xFF9
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           prodh	equ	0xFF4
  2031                           prodl	equ	0xFF3
  2032                           indf0	equ	0xFEF
  2033                           postinc0	equ	0xFEE
  2034                           postdec0	equ	0xFED
  2035                           preinc0	equ	0xFEC
  2036                           plusw0	equ	0xFEB
  2037                           fsr0h	equ	0xFEA
  2038                           fsr0l	equ	0xFE9
  2039                           wreg	equ	0xFE8
  2040                           indf1	equ	0xFE7
  2041                           postinc1	equ	0xFE6
  2042                           postdec1	equ	0xFE5
  2043                           preinc1	equ	0xFE4
  2044                           plusw1	equ	0xFE3
  2045                           fsr1h	equ	0xFE2
  2046                           fsr1l	equ	0xFE1
  2047                           bsr	equ	0xFE0
  2048                           indf2	equ	0xFDF
  2049                           postinc2	equ	0xFDE
  2050                           postdec2	equ	0xFDD
  2051                           preinc2	equ	0xFDC
  2052                           plusw2	equ	0xFDB
  2053                           fsr2h	equ	0xFDA
  2054                           fsr2l	equ	0xFD9
  2055                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        353
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      48
    BANK0           160      0     100
    BANK1           256      0     225
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_string@str	PTR const unsigned char  size(2) Largest target is 225
		 -> dash(COMRAM[2]), point(COMRAM[3]), colon(COMRAM[2]), months(BANK1[225]), 
		 -> error(COMRAM[7]), days(BANK0[100]), 


Critical Paths under _main in COMRAM

    _main->_months_display
    _months_display->_lcd_string
    _lcd_init->_lcd_command
    _days_display->_lcd_string
    _lcd_string->_lcd_data
    _ascii_display->_lcd_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6938
                                              9 COMRAM     1     1      0
                      _ascii_display
                       _days_display
                        _lcd_command
                           _lcd_init
                         _lcd_string
                     _months_display
                          _uart_init
                            _uart_rx
 ---------------------------------------------------------------------------------
 (1) _uart_rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _months_display                                       5     5      0    2330
                                              4 COMRAM     5     5      0
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0      30
                                              2 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _days_display                                         4     4      0    2218
                                              4 COMRAM     4     4      0
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           2     0      2    2127
                                              2 COMRAM     2     0      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _ascii_display                                        2     2      0     135
                                              2 COMRAM     2     2      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ascii_display
     _lcd_data
   _days_display
     _lcd_string
       _lcd_data
   _lcd_command
   _lcd_init
     _lcd_command
   _lcd_string
     _lcd_data
   _months_display
     _lcd_string
       _lcd_data
   _uart_init
   _uart_rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E1       7       87.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      64       5       62.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A      30       1       50.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     175      20        0.0%
DATA                 0      0     175       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Oct 01 22:05:46 2021

            lcd_data@dat 0028                       l13 7A12                       l26 7E6A  
                     l71 7AC8                       l48 7FFE                       l65 7A76  
                     l68 7B1A                       l77 7A42                       u60 79D0  
                     u61 79CC                       u70 79DE                       u71 79DA  
                    l101 79A4                      l120 79E6                      l116 79C2  
                    l118 79D0                      l840 7A8E                      l850 7AB4  
                    l842 7A90                      l834 7A7A                      l852 7AB6  
                    l844 7A92                      l836 7A8A                      l846 7AA0  
                    l838 7A8C                      l870 7AE2                      l862 7ACC  
                    l848 7AB2                      l880 7B08                      l872 7AE4  
                    l864 7ADC                      l890 7A00                      l882 79EA  
                    l874 7AF2                      l866 7ADE                      l892 7A06  
                    l884 79EE                      l876 7B04                      l868 7AE0  
                    l980 7A5E                      l894 7A0C                      l886 79F6  
                    l878 7B06                      l982 7A64                      l974 7A44  
                    l990 7992                      l888 79FC                      l984 7A6A  
                    l976 7A48                      l992 7996                      l986 7A70  
                    l978 7A58                      l994 7998                      l996 799A  
                    l988 798E                      l998 799C                      u100 7A42  
                    u101 7A3E                      u110 7EA0                      u111 7E9C  
                    u120 7ED2                      u121 7ECE                      u130 7F04  
                    u131 7F00                      u140 7C26                      u141 7C22  
                    u157 7A4E                      u167 7AEA                      u177 7B10  
                    u187 7A98                      u197 7ABE                      wreg 000FE8  
      months_display@bcd 002D                     l1000 799E                     l1002 79A0  
                   l1010 79C2                     l1100 7E18                     l1004 79A2  
                   l1012 79DE                     l1110 7E7A                     l1014 79E4  
                   l1120 7EB0                     l1112 7E7E                     l1130 7F04  
                   l1122 7EC0                     l1114 7E84                     l1106 7E6E  
                   l1140 7F54                     l1132 7F14                     l1124 7ED2  
                   l1116 7E8E                     l1108 7E72                     l1070 7A14  
                   l1142 7F64                     l1134 7F24                     l1126 7EE2  
                   l1118 7EA0                     l1150 7F94                     l1072 7A18  
                   l1080 7D88                     l1144 7F74                     l1136 7F34  
                   l1128 7EF2                     l1160 7BFE                     l1074 7A26  
                   l1090 7DC8                     l1082 7D8E                     l1146 7F84  
                   l1138 7F44                     l1170 7C26                     l1076 7A2A  
                   l1092 7DD8                     l1084 7D98                     l1180 7C6E  
                   l1172 7C32                     l1164 7C02                     l1156 7BF6  
                   l1094 7DE8                     l1086 7DA8                     l1078 7D84  
                   l1182 7C74                     l1174 7C3E                     l1166 7C14  
                   l1158 7BFA                     l1096 7DF8                     l1088 7DB8  
                   l1184 7C80                     l1176 7C50                     l1168 7C16  
                   l1098 7E08                     l1186 7C86                     l1178 7C56  
                   l1196 7FA8                     l1198 7E2C                     _CREN 007D5C  
                   _LATB 000F8A                     _date 0001                     _dash 0019  
                   _days 0060                     _main 7BF6                     _time 0008  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     start 0000             ___param_bank 000000  
                  ?_main 0027                    _LATB0 007C50                    _LATB1 007C51  
                  _RCREG 000FAE                    _SPBRG 000FAF                    _TRISB 000F93  
                  _TXREG 000FAD                    _colon 001B                    _error 000F  
                  _point 0016                    main@i 0030                    tablat 000FF5  
        __end_of_uart_rx 79E8                    status 000FD8          __initialization 7B80  
           __end_of_main 7CA0                   ??_main 0030            __activetblptr 000002  
   __end_of_days_display 7E6C      months_display@Htemp 002F      months_display@Ltemp 002E  
         lcd_command@cmd 0028         __end_of_lcd_data 7ACA         __end_of_lcd_init 7A78  
   __size_of_lcd_command 0052                   clear_0 7BE6                   _months 0100  
           __pdataCOMRAM 0001                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_uart_rx 0027            lcd_string@str 0029  
             __accesstop 0060  __end_of__initialization 7BEC            ___rparam_used 000001  
       ascii_display@bcd 0029           __pcstackCOMRAM 0027             __pidataBANK0 7B1C  
           __pidataBANK1 7CA1  __size_of_months_display 0194    __end_of_ascii_display 7A14  
  __size_of_days_display 00EA          days_display@bcd 002D       __size_of_uart_init 0018  
              ?_lcd_data 0027               _lcd_string 7A14                ?_lcd_init 0027  
           _days_display 7D82                  __Hparam 0000                  __Lparam 0000  
                __pcinit 7B80                  __ramtop 0800                  __ptext0 7BF6  
                __ptext1 79C2                  __ptext2 798E                  __ptext3 7E6C  
                __ptext4 7A44                  __ptext5 7ACA                  __ptext6 7D82  
                __ptext7 7A14                  __ptext8 79E8                  __ptext9 7A78  
                _uart_rx 79C2                  _rx_data 001D               ??_lcd_data 0027  
             ??_lcd_init 0029     end_of_initialization 7BEC            __Lmediumconst 0000  
      __end_of_uart_init 79A6                _RCSTAbits 000FAB                  postdec1 000FE5  
                postinc0 000FEE           _months_display 7E6C                _TRISCbits 000F94  
            ?_lcd_string 0029                _TXSTAbits 000FAC            ??_lcd_command 0027  
      ascii_display@temp 002A   __end_of_months_display 8000            __pidataCOMRAM 79A6  
    start_initialization 7B80          ?_months_display 0027      __end_of_lcd_command 7B1C  
            __pdataBANK0 0060              __pdataBANK1 0100      __size_of_lcd_string 0030  
            __pbssCOMRAM 001D        __size_of_lcd_data 0052        __size_of_lcd_init 0034  
 __size_of_ascii_display 002C                 ?_uart_rx 0027         days_display@temp 002E  
            _lcd_command 7ACA                 _PIR1bits 000F9E                _uart_init 798E  
          _ascii_display 79E8             ??_lcd_string 002B                copy_data0 7B94  
              copy_data1 7BB4                copy_data2 7BD4                 __Hrparam 0000  
               __Lrparam 0000               ?_uart_init 0027       __end_of_lcd_string 7A44  
         ?_ascii_display 0027         __size_of_uart_rx 0026                 _lcd_data 7A78  
               _lcd_init 7A44            __size_of_main 00AA         ??_months_display 002B  
          ?_days_display 0027              ??_uart_init 0027          ??_ascii_display 0029  
         ??_days_display 002B             ?_lcd_command 0027  
